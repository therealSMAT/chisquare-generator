public class Message {

    private static char[] alphabets = new char[] {'A', 'B', 'C', 'D', 'E', 'F', 'G','H','I','J','K','L','M','N','O','P','Q', 'R', 'S', 'T', 'U', 'V','W','X','Y','Z'};

    public static void main(String[] args) {
        // Cipher Text
        String message = "GVUCRGYDHOJSBBIKFFUMNZBOQPOZYOJYNBTKFJYFVRBINQJOQIFYAPOMBFJOMVQFROSYZAEXNBTSAHUBRGJSAUKXQSHVLWDQYCWSPBEDVQUDUOJDUSIYYRYOEGQBRBEDZCJSIOJOQHEBRHHONHZEFHEBRJUXZOYXYMRIGVUSEFQDVCDKYOICRGIWRBJYSHXOQODQRFIYSPQDGZUKARRIGVUSEGUVSWDDRFUCGFQDUSHDUSONVGSYISHKFCKXQFUKFCDDBFKXNKQIOMHONZYJVBWDUOJGUOJSGAQURGIOAGUPBFJRRAJYQCTOCSDNFCDGUOJSGKYVYAQURGUXFSVYECJRRFIDBREKARJRNHQVYCVDUSEDUSHCPODXBHYMRHXSFHEYRJUXNEKSGSRBNJUCBZTSRFCKLDHOSSHDBFKXEOJRRFJRNBXOECYMNZBIOIJZBWDDYSICYMTSRHHIVBWDBGJOZHXOBBSYZWDQGWTONZBLLVYWFSBPGVKCJSSYHZTSZOWSASMSGVEEGQEXGFQNVQJSBBQMVFSEZGJKAQUSAKXSPVQXNFCINZBYSKXYFSCOZPUBFOHOOFQFRTBORGQDGCFCCSUNOSVYESJRRSDOZMCKXSIKZCLOVTJRRGEVQWUBFFUKYZOKESRBNJUDUSDDUWICHFUVLWIXGHXOBIJMBAUKAMEPGVUWJODDRRUKPVMYHZTRNJUZESVOEFUNGVQDNZBCGODNNBTPVUXDJVQDJSXKISXOESJRRBYCNQQCRWDGUWSRGVUSAHUBNQJSBBEPZODIVBTSIWTENZBIEOJSBBQVQSSSFWEXZOASAUFBBQUCFSIYASFBBQUCFDUBFCBNVSHZECTEPSIKACKDPCCOVBJOARUNOMDYBBUWBGJKEAYOFHHIGCQFBWTDUWIZECRVRAZEFHQCPCHDRNTSQGYXPSJRRMSKAHKCHOBVLAQURFUDESQDCVOCVQQVYMYWCCICVPBOGVUIZOAOVHUMBBEWVQQVYMYWCCICVPBOGVUIFVEYGRUCRFJOEGJRRBIDNBTSAUQXQTYQUHYXTWIONQXCBZTSRFISARYFVRKKYZOBNHYYAOBMBIHCRCVKPHYYAOVDRFQVYPUMNIIOGVUMBGJYSFKXAWDQVGIEESJYOSQDYSQCGOIRVUXKFHXOPCIDBTIDNMYXT";
        char[] charArray = message.toCharArray();

        // Encryption Keys
        int[] keys = new int[]{13, 14, 16, 10};

        // Decrypt the cipher
        decrypt(charArray, keys);
    }

    public static void decrypt(char[] messageStr, int[] keys)
    {
        int keyLen = keys.length;
        String detectedString = "";
        int i = 0;

        for (char str: messageStr) {
            if (i == keyLen) i = 0;
            int cipherPos = new String(alphabets).indexOf(str);
            int modulo = getModulo(cipherPos - keys[i]);
            detectedString +=  alphabets[modulo];
            i++;
        }
        System.out.println(detectedString);
    }

    public static int getModulo(int value)
    {
        if (value < 0) {
            value = 26 + value;
        }
        return value % 26;
    }
}
